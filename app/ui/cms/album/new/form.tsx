'use client'
import { createActor } from '@/app/lib/api/cms/actor/createActor'
import { fetchCircles } from '@/app/lib/api/cms/album/fetchCircles'
import { debounceHTML } from '@/app/lib/debounce'
import { Role } from '@prisma/client'
import clsx from 'clsx'
import { useEffect, useRef, useState } from 'react'
import { useFormState, useFormStatus } from 'react-dom'
import toast, { Toaster } from 'react-hot-toast'
import slug from 'slug'

export function Form({
	circles,
}: {
	circles: Awaited<ReturnType<typeof fetchCircles>>
}) {
	const [slugValue, setSlug] = useState('')
	const [customSlug, setCustomSlug] = useState(false)
	const [state, dispatch] = useFormState(createActor, {
		errors: {},
		message: '',
	})
	const updateSlug = debounceHTML(
		async (e: React.ChangeEvent<HTMLInputElement>) => {
			if (customSlug) return
			const { value } = e.target
			const { toRomaji } = await import('@/app/lib/kuroshiro')
			const romaji = await toRomaji(value)
			setSlug(slug(romaji, { lower: true }))
		},
		500,
	)

	useEffect(() => {
		if (state.message) {
			toast.error(state.message, {
				style: { backgroundColor: '#272F38', color: 'white' },
			})
		}
	}, [state])

	const nameRef = useRef<HTMLInputElement>(null)
	useEffect(() => {
		if (!customSlug && nameRef.current && nameRef.current.value.trim() !== '') {
			updateSlug({
				target: { value: nameRef.current.value },
			} as React.ChangeEvent<HTMLInputElement>)
		}
	}, [customSlug, updateSlug])
	return (
		<form action={dispatch} className="grid grid-cols-1 gap-4">
			<Toaster />
			<div className="flex flex-col">
				<label htmlFor="name">Name</label>
				<input
					ref={nameRef}
					className="input input-bordered"
					id="name"
					name="name"
					type="text"
					aria-describedby="name-error"
					onChange={updateSlug}
				/>
				<div id="name-error" aria-live="polite" aria-atomic="true">
					{state.errors?.name &&
						state.errors.name.map((error: string) => (
							<p className="mt-2 text-sm text-red-500" key={error}>
								{error}
							</p>
						))}
				</div>
			</div>
			<div className="flex flex-col">
				<label htmlFor="slug">
					<div
						className="tooltip tooltip-right"
						data-tip='Please ensure all characters are latin lowercase and spaces are written with "-"'
					>
						<div className="flex gap-4">
							<label htmlFor="slug-toggle">Custom Slug</label>
							<input
								id="slug-toggle"
								type="checkbox"
								checked={customSlug}
								onChange={({ target: { checked } }) => {
									setCustomSlug(checked)
								}}
							></input>
						</div>
					</div>
					<p>Slug</p>
				</label>
				<div
					className={clsx({ tooltip: !customSlug })}
					data-tip="Slug is autogenerated. Please wait for a few seconds after inputting name. Select custom slug to enable manual input."
				>
					{!customSlug && (
						<input
							id="slug-hidden"
							name="slug"
							type="hidden"
							value={slugValue}
							disabled={customSlug}
							aria-describedby="slug-error"
						/>
					)}
					<input
						className="input input-bordered w-full"
						id="slug"
						name="slug"
						type="text"
						disabled={!customSlug}
						value={slugValue}
						onChange={({ target: { value } }) => {
							if (customSlug) setSlug(value)
						}}
						aria-describedby="slug-error"
					/>
				</div>
				<div id="slug-error" aria-live="polite" aria-atomic="true">
					{state.errors?.slug &&
						state.errors.slug.map((error: string) => (
							<p className="mt-2 text-sm text-red-500" key={error}>
								{error}
							</p>
						))}
				</div>
			</div>
			<div className="flex flex-col">
				<label htmlFor="circle">Circle</label>
				<select
					id="circle"
					name="circle"
					placeholder="circle"
					className="select select-bordered w-full"
					defaultValue=""
					aria-describedby="circle-error"
				>
					<option value="" disabled>Circle</option>
					{circles.map(({ id, name }) => (
						<option key={id} value={id}>
							{name}
						</option>
					))}
				</select>
				<div id="circle-error" aria-live="polite" aria-atomic="true">
					{state.errors?.role &&
						state.errors.role.map((error: string) => (
							<p className="mt-2 text-sm text-red-500" key={error}>
								{error}
							</p>
						))}
				</div>
			</div>
			<SubmitButton />
		</form>
	)
}

function SubmitButton() {
	const { pending } = useFormStatus()
	return (
		<button
			className={clsx('btn btn-primary w-fit', pending && 'btn-disabled')}
			aria-disabled={pending}
		>
			{pending ? (
				<>
					<span className="loading loading-ring loading-lg"></span>
					<p>Loading...</p>
				</>
			) : (
				<p>Submit</p>
			)}
		</button>
	)
}
