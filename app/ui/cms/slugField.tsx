'use client'
import clsx from 'clsx'
import { Dispatch, SetStateAction } from 'react'

export function SlugField({
	customSlug,
	setCustomSlug,
  slugValue,
  errorArray,
  setSlug
}: {
	customSlug: boolean
	setCustomSlug: Dispatch<SetStateAction<boolean>>
  slugValue: string
  errorArray?: string[]
	setSlug: Dispatch<SetStateAction<string>>
}) {
	return (
		<div className="flex flex-col">
			<label htmlFor="slug">
				<div
					className="tooltip tooltip-right lg:inline-block hidden"
					data-tip='Please ensure all characters are latin lowercase and spaces are written with "-"'
				>
					<div className="flex gap-4">
						<label htmlFor="slug-toggle">Custom Slug</label>
						<input
							id="slug-toggle"
							type="checkbox"
							checked={customSlug}
							onChange={({ target: { checked } }) => {
								setCustomSlug(checked)
							}}
						></input>
					</div>
				</div>
				<div
					className="tooltip tooltip-right lg:hidden inline-block"
					data-tip=""
				>
					<div className="flex gap-4">
						<label htmlFor="slug-toggle">Custom Slug</label>
						<input
							id="slug-toggle"
							type="checkbox"
							checked={customSlug}
							onChange={({ target: { checked } }) => {
								setCustomSlug(checked)
							}}
						></input>
					</div>
				</div>
				<p>Slug</p>
			</label>
			<div
				className={clsx({ tooltip: !customSlug })}
				data-tip="Slug is autogenerated. Please wait for a few seconds after inputting name. Select custom slug to enable manual input."
			>
				{!customSlug && (
					<input
						id="slug-hidden"
						name="slug"
						type="hidden"
						value={slugValue}
						disabled={customSlug}
						aria-describedby="slug-error"
					/>
				)}
				<input
					className="input input-bordered w-full"
					id="slug"
					name="slug"
					type="text"
					disabled={!customSlug}
					value={slugValue}
					onChange={({ target: { value } }) => {
						if (customSlug) setSlug(value)
					}}
					aria-describedby="slug-error"
				/>
			</div>
			<div id="slug-error" aria-live="polite" aria-atomic="true">
				{errorArray &&
					errorArray.map((error: string) => (
						<p className="mt-2 text-sm text-red-500" key={error}>
							{error}
						</p>
					))}
			</div>
		</div>
	)
}
