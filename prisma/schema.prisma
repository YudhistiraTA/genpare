// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  vocalist
  translator
  composer
  lyricist
  circle
}

model Album {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  imageUrl    String    @map("image_url")
  releaseYear Int       @map("release_year")
  totalTrack  Int       @map("total_track")
  Circle      Actor?    @relation(fields: [circleId], references: [id])
  circleId    String?
  Song        Song[]
  updatedAt   DateTime? @updatedAt

  @@index([id], type: Hash)
  @@index([slug], type: Hash)
  @@index([name], type: Hash)
}

model Actor {
  id            String    @id @default(uuid())
  name          String    @unique
  slug          String    @unique
  role          Role
  Album         Album[]
  VocalSongs    Song[]    @relation("vocal_song")
  Lyrics        Lyrics[]
  ComposedSongs Song[]    @relation("composed_song")
  updatedAt     DateTime? @updatedAt

  @@index([id], type: Hash)
  @@index([slug], type: Hash)
  @@index([name], type: Hash)
}

model Song {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  youtubeId String    @map("youtube_id")
  trackNo   Int       @map("track_no")
  Vocals    Actor[]   @relation("vocal_song")
  Composer  Actor[]   @relation("composed_song")
  Album     Album     @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId   String
  Lyrics    Lyrics[]
  updatedAt DateTime? @updatedAt

  @@index([id], type: Hash)
  @@index([slug], type: Hash)
}

enum Language {
  japanese
  romaji
  english
  french
  spanish
  korean
}

model Lyrics {
  id        String    @id @default(uuid())
  content   String    @db.Text
  createdBy Actor?    @relation(fields: [creatorId], references: [id])
  creatorId String?   @map("creator_id")
  language  Language
  Song      Song?     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String?
  updatedAt DateTime? @updatedAt

  @@unique([language, songId])
}

model History {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
}
